<?xml version="1.0"?>
<!--
  Data HUb Service (DHuS) - For Space data distribution.
  Copyright (C) 2019 European Space Agency (ESA)
  Copyright (C) 2019 GAEL Systems
  Copyright (C) 2019 Serco Spa

  This file is part of DHuS software sources.

  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU Affero General Public License as
  published by the Free Software Foundation, either version 3 of the
  License, or (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU Affero General Public License for more details.

  You should have received a copy of the GNU Affero General Public License
  along with this program. If not, see <http://www.gnu.org/licenses/>.

-->
<!DOCTYPE rdf:RDF [
   <!ENTITY rdf  "http://www.w3.org/1999/02/22-rdf-syntax-ns#">
   <!ENTITY rdfs "http://www.w3.org/2000/01/rdf-schema#">
   <!ENTITY owl  "http://www.w3.org/2002/07/owl#">
   <!ENTITY nc   "http://www.unidata.ucar.edu/netcdf#">
   <!ENTITY s5p  "http://www.esa.int/s5p#">
   <!ENTITY drb  "http://www.gael.fr/drb#">
   <!ENTITY dhus "http://www.gael.fr/dhus#">
   <!ENTITY img  "http://www.gael.fr/drb/image#">
   ]>

<rdf:RDF xmlns:owl ="&owl;"
         xmlns:rdf ="&rdf;"
         xmlns:rdfs="&rdfs;"
         xmlns:nc  ="&nc;"
         xmlns:s5p ="&s5p;"
         xmlns:drb ="&drb;"
         xmlns:dhus="&dhus;"
         xmlns:img ="&img;"
         xml:base  ="&s5p;">

   <owl:Ontology rdf:about="&s5p;"/>

   <!-- S5P AUXILIARY PRODUCT  -->
   <rdf:Description rdf:about="&s5p;auxiliary">
      <dhus:metadataTypes rdf:parseType="Literal">

         <!-- MM This is added for provisoire
         This should be renamed FOR ALL ADDONS -->
         <metadataType id="satellite"
                       name="Satellite"
                       contentType="text/plain"
                       category="summary">
         </metadataType>

         <metadataType id="generationDate"
                       name="Generation date"
                       contentType="text/date+iso8601"
                       category="product">
            <solrField name="generationdate"
                       type="tdate"/>
         </metadataType>

         <metadataType id="format"
                       name="Format"
                       contentType="text/plain"
                       category="product">
            <solrField name="format"
                       type="string"
                       required="true"/>
         </metadataType>

         <metadataType id="size"
                       name="Size"
                       contentType="text/plain"
                       category="summary">
            <solrField name="size"
                       type="string"/>
         </metadataType>

         <metadataType id="beginPosition"
                       name="Validity start"
                       contentType="text/date+iso8601"
                       category="product">
            <solrField name="beginposition"
                       type="tdate"/>
         </metadataType>

         <metadataType id="endPosition"
                       name="Validity stop"
                       contentType="text/date+iso8601"
                       category="product">
            <solrField name="endposition"
                       type="tdate"/>
         </metadataType>

         <metadataType id="filename"
                       name="Filename"
                       contentType="text/plain"
                       category="summary">
            <solrField name="filename"
                       type="string"
                       required="true"/>
         </metadataType>

         <metadataType id="productType"
                       name="Product type"
                       contentType="text/plain"
                       category="product">
            <solrField name="producttype"
                       type="text_general"/>
         </metadataType>

         <metadataType id="platformName"
                       name="Platform name"
                       contentType="text/plain"
                       category="platform">
            <solrField name="platformname"
                       type="text_general"/>
         </metadataType>

         <metadataType id="platformShortName"
                       name="Platform short name"
                       contentType="text/plain"
                       category="platform">
            <solrField name="platformshortname"
                       type="text_general"/>
         </metadataType>

         <metadataType id="platformSerialIdentifier"
                       name="Platform serial identifier"
                       contentType="text/plain"
                       category="platform">
            <solrField name="platformserialidentifier"
                       type="text_general"/>
         </metadataType>

      </dhus:metadataTypes>
   </rdf:Description>

   <!-- S5P AUXILIARY PRODUCT -->
   <rdf:Description rdf:about="&s5p;auxiliary">
      <dhus:support/>
      <dhus:identifier rdf:parseType="Literal">
      <![CDATA[
         fn:tokenize(name (.), '\.')[1]
      ]]>
      </dhus:identifier>

      <dhus:metadataExtractor  rdf:parseType="Literal">
      <![CDATA[
         <!-- ============================================================== -->
         <!-- FUNCTIONS                                                      -->
         <!-- ============================================================== -->

         declare function local:computeSizes ($path, $base as item()*) as item()*
         {
            let $product := .
            return
               fn:data($product/@size)
         };

         declare function local:roundHalfDown($arg, $precision) as xs:double*
         {
            xs:integer((xs:double($arg)*math:power(10, $precision))) div 
               math:power(10, $precision)
         };

         declare function local:computedateTime ($inputDate as xs:string?) as xs:string
         {
            let $input := $inputDate
            return concat(substring($input, 1, 4), "-",
                          substring($input, 5, 2), "-",
                          substring($input, 7, 5), ":",
                          substring($input, 12, 2), ":",
                          substring($input, 14, 2), ".000Z")
         };

         <!-- ============================================================== -->
         <!-- VARIABLES                                                      -->
         <!-- ============================================================== -->
         
         let $name := name()

         let $root := ./root

         <!-- MM TO BE REMOVED WITH NEXT RELESE
         let $VAR_validity_start := local:computedateTime(
            data($root/attributes/*[name(.) = "validity_start"]))

         let $VAR_validity_stop := local:computedateTime(
            data($root/attributes/*[name(.) = "validity_stop"]))
         -->

         let $VAR_product_type := fn:substring($name, 10, 10)

         return
         (

         <!-- ============================================================== -->
         <!-- EXTRACTIONS                                                    -->
         <!-- ============================================================== -->

         <!-- Indexed metadata -->

         <!-- MM This is added for provisoire
         This should be renamed FOR ALL ADDONS -->
         <!-- SATELLITE -->
         <metadata category="summary" name="Satellite" type="text/plain">
            Sentinel-5 P
         </metadata>,

         <!-- GENERATION DATE -->
         <metadata queryable="generationdate" name="Generation date"
                   category="product" type="text/date+iso8601">
         {
            let $Var_creation_date := fn:data($root/attributes/*[name(.) = "creation_date"])
            return
               if ($Var_creation_date)
               then local:computedateTime($Var_creation_date)
               else local:computedateTime(fn:substring($name, 53, 15))
         }
         </metadata>,

         <!-- FORMAT -->
         <metadata queryable="format" name="Format"
                   category="product" type="text/plain">
         {
            if (matches($name, "(?i).*nc"))
            then "netCDF"
            else "UNKNOWN"
         }
         </metadata>,

         <!-- SIZE -->
         <metadata queryable="size" name="Size"
                   category="summary" type="text/plain">
         {
            let $size := xs:double(fn:sum(local:computeSizes(., ())))
            let $kilo := 1024
            let $mega := xs:integer($kilo * 1024)
            let $giga := xs:integer($mega * 1024)
            let $tera := xs:integer($giga * 1024)
            let $kilo_size := local:roundHalfDown(($size div $kilo), 2)
            let $mega_size := local:roundHalfDown(($size div $mega), 2)
            let $giga_size := local:roundHalfDown(($size div $giga), 2)
            let $tera_size := local:roundHalfDown(($size div $tera), 2)
            return
               if ($size < 1024)
               then
                  concat ($size, " bytes")
               else
                  if (($size div $kilo) < 1024)
                  then
                     concat ($kilo_size, " KB")
                  else
                     if (($size div $mega) < 1024)
                        then
                           concat ($mega_size, " MB")
                     else
                        if (($size div $giga) < 1024)
                        then
                           concat ($giga_size, " GB")
                        else 
                           concat ($tera_size, " TB")
         }
         </metadata>,

         <!-- SENSING START -->
         <metadata queryable="beginposition" name="Validity start"
                   category="product" type="text/date+iso8601">
         {
            let $Var_validity_start := fn:data($root/attributes/*[name(.) = "validity_start"])
            return
               if ($Var_validity_start)
               then local:computedateTime($Var_validity_start)
               else
                  let $Var_time_coverage_start := fn:data($root/attributes/*[name(.) = "time_coverage_start"])
                  return
                     if ($Var_time_coverage_start)
                     then local:computedateTime($Var_time_coverage_start)
                     else local:computedateTime(fn:substring($name, 21, 15))
         }
         </metadata>,

         <!-- SENSING STOP -->
         <metadata queryable="endposition" name="Validity stop"
                   category="product" type="text/date+iso8601">
         {
            let $Var_validity_stop := fn:data($root/attributes/*[name(.) = "validity_stop"])
            return
               if ($Var_validity_stop)
               then local:computedateTime($Var_validity_stop)
               else
                  let $Var_time_coverage_end := fn:data($root/attributes/*[name(.) = "time_coverage_end"])
                  return
                     if ($Var_time_coverage_end)
                     then local:computedateTime($Var_time_coverage_end)
                  else local:computedateTime(fn:substring($name, 37, 15))
         }
         </metadata>,

         <!-- FILENAME -->
         <metadata queryable="filename" name="Filename"
                   category="summary" type="text/plain">
         { $name }
         </metadata>,

         <!-- PRODUCT TYPE -->
         <metadata queryable="producttype" name="Product type"
                   category="product" type="text/plain">
         { $VAR_product_type }
         </metadata>,

         <!-- PLATFORM NAME -->
         <metadata queryable="platformname" name="Platform name"
                   category="platform" type="text/plain">
            Sentinel-5 Precursor
         </metadata>,

         <!-- PLATFORM SHORT NAME -->
         <metadata queryable="platformshortname" name="Platform short name"
                   category="platform" type="text/plain">
            S5P
         </metadata>,

         <!-- PLATFORM SERIAL IDENTIFIER -->
         <metadata queryable="platformserialidentifier" name="Platform serial identifier"
                   category="platform" type="text/plain">
            5P
         </metadata>

      )
      ]]>
      </dhus:metadataExtractor>

   </rdf:Description>

   <!-- S5P PRODUCT  -->
   <rdf:Description rdf:about="&s5p;product">
      <dhus:metadataTypes rdf:parseType="Literal">

         <!-- MM This is added for provisoire
         This should be renamed FOR ALL ADDONS -->
         <metadataType id="satellite"
                       name="Satellite"
                       contentType="text/plain"
                       category="summary">
         </metadataType>

         <!-- MM This is added for provisoire
         This should be renamed FOR ALL ADDONS -->
         <metadataType id="instrument"
                       name="Instrument"
                       contentType="text/plain"
                       category="summary">
         </metadataType>

         <!-- MM This is added for provisoire
         This should be renamed FOR ALL ADDONS -->
         <metadataType id="date"
                       name="Date"
                       contentType="text/date+iso8601"
                       category="summary">
         </metadataType>

         <metadataType id="generationDate"
                       name="Generation date"
                       contentType="text/date+iso8601"
                       category="product">
            <solrField name="generationdate"
                       type="tdate"/>
         </metadataType>

         <metadataType id="format"
                       name="Format"
                       contentType="text/plain"
                       category="product">
            <solrField name="format"
                       type="string"
                       required="true"/>
         </metadataType>

         <metadataType id="size"
                       name="Size"
                       contentType="text/plain"
                       category="summary">
            <solrField name="size"
                       type="string"/>
         </metadataType>

         <metadataType id="beginPosition"
                       name="Sensing start"
                       contentType="text/date+iso8601"
                       category="product">
            <solrField name="beginposition"
                       type="tdate"/>
         </metadataType>

         <metadataType id="endPosition"
                       name="Sensing stop"
                       contentType="text/date+iso8601"
                       category="product">
            <solrField name="endposition"
                       type="tdate"/>
         </metadataType>

         <metadataType id="mission"
                       name="Mission"
                       contentType="text/plain"
                       category="product">
            <solrField name="mission"
                       type="string"/>
         </metadataType>

         <metadataType id="platformName"
                       name="Platform name"
                       contentType="text/plain"
                       category="platform">
            <solrField name="platformname"
                       type="text_general"/>
         </metadataType>

         <metadataType id="platformShortName"
                       name="Platform short name"
                       contentType="text/plain"
                       category="platform">
            <solrField name="platformshortname"
                       type="text_general"/>
         </metadataType>

         <metadataType id="platformNumber"
                       name="Platform number"
                       contentType="text/plain"
                       category="platform">
         </metadataType>

         <metadataType id="platformSerialIdentifier"
                       name="Platform serial identifier"
                       contentType="text/plain"
                       category="platform">
            <solrField name="platformserialidentifier"
                       type="text_general"/>
         </metadataType>

         <metadataType id="filename"
                       name="Filename"
                       contentType="text/plain"
                       category="summary">
            <solrField name="filename"
                       type="string"
                       required="true"/>
         </metadataType>

         <metadataType id="instrumentName"
                       name="Instrument name"
                       contentType="text/plain"
                       category="instrument">
            <solrField name="instrumentname"
                       type="text_general"/>
         </metadataType>

         <metadataType id="instrumentShortName"
                       name="Instrument short name"
                       contentType="text/plain"
                       category="instrument">
            <solrField name="instrumentshortname"
                       type="text_general"/>
         </metadataType>

         <metadataType id="productType"
                       name="Product type"
                       contentType="text/plain"
                       category="product">
            <solrField name="producttype"
                       type="text_general"/>
         </metadataType>

         <metadataType id="productTypeDescription"
                       name="Product type description"
                       contentType="text/plain"
                       category="product">
            <solrField name="producttypedescription"
                       type="text_general"/>
         </metadataType>

         <metadataType id="processingLevel"
                       name="Processing level"
                       contentType="text/plain"
                       category="product">
            <solrField name="processinglevel"
                       type="text_general"/>
         </metadataType>

         <metadataType id="processingMode"
                       name="Processing mode"
                       contentType="text/plain"
                       category="product">
            <solrField name="processingmode"
                       type="text_general"/>
         </metadataType>

         <metadataType id="processingModeAbbreviation"
                       name="Processing mode abbreviation"
                       contentType="text/plain"
                       category="product">
            <solrField name="processingmodeabbreviation"
                       type="text_general"/>
         </metadataType>

         <metadataType id="processorVersion"
                       name="Processor version"
                       contentType="text/plain"
                       category="product">
            <solrField name="processorversion"
                       type="text_general"/>
         </metadataType>

         <metadataType id="revisionNumber"
                       name="Revision number"
                       contentType="text/plain"
                       category="product">
            <solrField name="revisionnumber"
                       type="text_general"/>
         </metadataType>

         <metadataType id="orbitNumber"
                       name="Orbit number (start)"
                       contentType="text/integer"
                       category="product">
            <solrField name="orbitnumber"
                       type="int"/>
         </metadataType>

         <!-- No value in product
         <metadataType id="orbitDirection"
                       name="Orbit direction"
                       contentType="text/plain"
                       category="product">
            <solrField name="orbitdirection"
                       type="text_general"/>
         </metadataType>
         -->

         <metadataType id="GMLfootprint"
                       name="Footprint"
                       contentType="application/gml+xml"
                       category="product">
            <solrField name="gmlfootprint"
                       type="string"/>
         </metadataType>

         <metadataType id="footprint"
                       name="JTS footprint"
                       contentType="application/jts"
                       category="product">
            <solrField name="footprint"
                       type="location_rpt"/>
         </metadataType>

      </dhus:metadataTypes>
   </rdf:Description>

   <!-- S5P PRODUCT -->
   <rdf:Description rdf:about="&s5p;product">
      <dhus:support/>
      <dhus:identifier rdf:parseType="Literal">
      <![CDATA[
         fn:tokenize(name (.), '\.')[1]
      ]]>
      </dhus:identifier>

      <dhus:metadataExtractor  rdf:parseType="Literal">
      <![CDATA[
         <!-- ============================================================== -->
         <!-- FUNCTIONS                                                      -->
         <!-- ============================================================== -->

         declare function local:computeSizes ($path, $base as item()*) as item()*
         {
            let $product := .
            return
               fn:data($product/@size)
         };

         declare function local:roundHalfDown($arg, $precision) as xs:double*
         {
            xs:integer((xs:double($arg)*math:power(10, $precision))) div 
               math:power(10, $precision)
         };

         declare function local:computedateTime ($inputDate as xs:string?) as xs:string
         {
            let $input := $inputDate
            return concat(substring($input, 1, 19),
                          ".000Z")
         };

         <!-- ============================================================== -->
         <!-- VARIABLES                                                      -->
         <!-- ============================================================== -->
         
         let $name := name()

         let $root := ./root

         let $VAR_platform := data($root/attributes/*[name(.) = "platform"])

         let $VAR_sensor := data($root/attributes/*[name(.) = "sensor"])

         let $VAR_product_type := fn:substring($name, 10, 10)

         let $VAR_posListTMP :=
            fn:data($root/groups/METADATA/groups/EOP_METADATA/groups/
                    om:featureOfInterest/groups/eop:multiExtentOf/groups/
                    gml:surfaceMembers/groups/gml:exterior/attributes/
                    *[name(.) = "gml:posList"])

         let $res :=
         (

         <!-- ============================================================== -->
         <!-- EXTRACTIONS                                                    -->
         <!-- ============================================================== -->

         <!-- Indexed metadata -->

         <!-- MM This is added for provisoire
         This should be renamed FOR ALL ADDONS -->
         <!-- SATELLITE -->
         <metadata name="Satellite"
                   category="summary" type="text/plain">
            Sentinel-5 P
         </metadata>,

         <!-- MM This is added for provisoire
         This should be renamed FOR ALL ADDONS -->
         <!-- INSTRUMENT -->
         <metadata name="Instrument"
                   category="summary" type="text/plain">
            TROPOMI
         </metadata>,

         <!-- MM This is added for provisoire
         This should be renamed FOR ALL ADDONS -->
         <!-- DATE -->
         <metadata name="Date"
                   category="summary" type="text/date+iso8601">
            { local:computedateTime(
                 fn:data($root/attributes/*[name(.) = "time_coverage_start"])) }
         </metadata>,

         <!-- GENERATION DATE -->
         <!-- Could be:
         { local:computedateTime(
              fn:data($root/attributes/*[name(.) = "date_created"])) }
         But extracted from product name (some products seem to miss the above
         field, and extraction is faster). -->
         <metadata queryable="generationdate" name="Generation date"
                   category="product" type="text/date+iso8601">
         {
            local:computedateTime(
               concat(fn:substring($name, 69, 4),
                      "-",
                      fn:substring($name, 73, 2),
                      "-",
                      fn:substring($name, 75, 5),
                      ":",
                      fn:substring($name, 80, 2),
                      ":",
                      fn:substring($name, 82, 2),
                      "Z"))
         }
         </metadata>,

         <!-- FORMAT -->
         <metadata queryable="format" name="Format"
                   category="product" type="text/plain">
         {
            if (matches($name, "(?i).*nc"))
            then "netCDF"
            else "UNKNOWN"
         }
         </metadata>,

         <!-- SIZE -->
         <metadata queryable="size" name="Size"
                   category="summary" type="text/plain">
         {
            let $size := xs:double(fn:sum(local:computeSizes(., ())))
            let $kilo := 1024
            let $mega := xs:integer($kilo * 1024)
            let $giga := xs:integer($mega * 1024)
            let $tera := xs:integer($giga * 1024)
            let $kilo_size := local:roundHalfDown(($size div $kilo), 2)
            let $mega_size := local:roundHalfDown(($size div $mega), 2)
            let $giga_size := local:roundHalfDown(($size div $giga), 2)
            let $tera_size := local:roundHalfDown(($size div $tera), 2)
            return
               if ($size < 1024)
               then
                  concat ($size, " bytes")
               else
                  if (($size div $kilo) < 1024)
                  then
                     concat ($kilo_size, " KB")
                  else
                     if (($size div $mega) < 1024)
                        then
                           concat ($mega_size, " MB")
                     else
                        if (($size div $giga) < 1024)
                        then
                           concat ($giga_size, " GB")
                        else 
                           concat ($tera_size, " TB")
         }
         </metadata>,

         <!-- SENSING START -->
         <metadata queryable="beginposition" name="Sensing start"
                   category="product" type="text/date+iso8601">
         { local:computedateTime(
              fn:data($root/attributes/*[name(.) = "time_coverage_start"])) }
         </metadata>,

         <!-- SENSING STOP -->
         <metadata queryable="endposition" name="Sensing stop"
                   category="product" type="text/date+iso8601">
         { local:computedateTime(
              fn:data($root/attributes/*[name(.) = "time_coverage_end"])) }
         </metadata>,

         <!-- MISSION NAME -->
         <metadata queryable="mission" name="Mission"
                   category="platform" type="text/plain">
            Sentinel
         </metadata>,

         <!-- PLATFORM NAME -->
         <metadata queryable="platformname" name="Platform name"
                   category="platform" type="text/plain">
            Sentinel-5 Precursor
         </metadata>,

         <!-- PLATFORM SHORT NAME -->
         <metadata queryable="platformshortname" name="Platform short name"
                   category="platform" type="text/plain">
            S5P
         </metadata>,

         <!-- PLATFORM NUMBER -->
         <metadata name="Platform number"
                   category="platform" type="text/plain">
            5P
         </metadata>,

         <!-- TRACE MM
         <metadata name="Trace MM"
                   category="product" type="text/plain">
         {
            (: posList looks like "lat lon lat lon lat ...."
                             e.g. "10 -30 12 -34 15 ...."
               JTS has to look like "lon lat, lon lat, lon ...."
                             e.g. "-30 10,-34 12, ...." :)

            let $VAR_posList :=
               fn:data($root/groups/METADATA/groups/EOP_METADATA/groups/
                       om:featureOfInterest/groups/eop:multiExtentOf/groups/
                       gml:surfaceMembers/groups/gml:exterior/attributes/
                       *[name(.) = "gml:posList"])

            let $VAR_tokens := fn:tokenize($VAR_posList, ' ')

            (: Extraction of latitudes :)
            let $VAR_tokensLat :=
               for $i at $index in $VAR_tokens
               return
                  (if (matches(xs:string($index), ".*1") or
                       matches(xs:string($index), ".*3") or
                       matches(xs:string($index), ".*5") or
                       matches(xs:string($index), ".*7") or
                       matches(xs:string($index), ".*9"))
                    then $i
                    else ()) 

            (: Extraction of longitudes :)
            let $VAR_tokensLon :=
               for $i at $index in $VAR_tokens
               return
                  (if (matches(xs:string($index), ".*0") or
                       matches(xs:string($index), ".*2") or
                       matches(xs:string($index), ".*4") or
                       matches(xs:string($index), ".*6") or
                       matches(xs:string($index), ".*8"))
                    then $i
                    else ()) 

            (: Mixing longitudes and latitudes :)
            let $VAR_fpTokens :=
               for $i at $index in $VAR_tokens (: $VAR_tokens count equals $VAR_tokensLon
                                              count + $VAR_tokensLat count :)
               return
                  ($VAR_tokensLon[$index],
                   $VAR_tokensLat[$index])

            (: Putting " " and "," between coordinates :)
            let $VAR_fpJTS :=
               fn:string-join(
               (   
                  for $i at $index in $VAR_fpTokens
                                                   
                  return
                     concat($i,
                            (if (matches(xs:string($index), ".*1") or
                                 matches(xs:string($index), ".*3") or
                                 matches(xs:string($index), ".*5") or
                                 matches(xs:string($index), ".*7") or
                                 matches(xs:string($index), ".*9"))
                             then " " 
                             else ","))
               ), ""
               )   

            (: Removing the final "," :)
            let $Var_fpJTS2 :=
               if (matches($VAR_fpJTS, ".*,"))
               then substring($VAR_fpJTS, 1, (fn:string-length($VAR_fpJTS) - 1)) 
               else $VAR_fpJTS

            (: And finaly "POLYGON ((.....))" :)
            let $footprint := concat("POLYGON ((", $Var_fpJTS2, "))")

            return $footprint
         }
         </metadata>,
         -->

         <!-- PLATFORM NSSDC IDENTIFIER -->
         <metadata queryable="platformserialidentifier" name="Platform serial identifier"
                   category="platform" type="text/plain">
            2017-nnnA
         </metadata>,

         <!-- FILENAME -->
         <metadata queryable="filename" name="Filename"
                   category="summary" type="text/plain">
         { $name }
         </metadata>,

         <!-- INSTRUMENT NAME -->
         <metadata queryable="instrumentname" name="Instrument name"
                   category="instrument" type="text/plain">
            TROPOspheric Monitoring Instrument
         </metadata>,

         <!-- INSTRUMENT SHORT NAME -->
         <metadata queryable="instrumentshortname" name="Instrument short name"
                   category="instrument" type="text/plain">
            TROPOMI
         </metadata>,

         <!-- PRODUCT TYPE -->
         <metadata queryable="producttype" name="Product type"
                   category="product" type="text/plain">
         { $VAR_product_type }
         </metadata>,

         <!-- PRODUCT TYPE DESCRIPTION -->
         <metadata queryable="producttypedescription" name="Product type description"
                   category="product" type="text/plain">
         {
            if ($VAR_product_type = "L2__AER_AI")
            then "Aerosol Index"
            else
            if ($VAR_product_type = "L2__AER_LH")
            then "Aerosol Layer Height"
            else
            if ($VAR_product_type = "L2__CLOUD_")
            then "Cloud"
            else
            if ($VAR_product_type = "L2__CO____")
            then "Carbon Monoxide"
            else
            if ($VAR_product_type = "L2__FRESCO")
            then "Cloud FRESCO Algorithm"
            else
            if ($VAR_product_type = "L2__HCHO__")
            then "Formaldehyde"
            else
            if ($VAR_product_type = "L2__NO2___")
            then "Nitrogen Dioxide"
            else
            if ($VAR_product_type = "L2__O3____")
            then "Ozone"
            else
            if ($VAR_product_type = "L2__O3__PR")
            then "Ozone Profile"
            else
            if ($VAR_product_type = "L2__O3_TPR")
            then "Tropospheric Ozone Profile"
            else
            if ($VAR_product_type = "L2__SO2___")
            then "Sulphur Dioxide"
            else
            if ($VAR_product_type = "L2__O3_TCL")
            then "Tropospheric Ozone"
            else
            if ($VAR_product_type = "L2__CH4___")
            then "Methane"
            else
            if (matches($VAR_product_type, "L2__NP_BD.*"))
            then "Cloud from SUOMI-NPP Mission at TROPOMI Field-of-view"
            else
            if ($VAR_product_type = "L1B_IR_UVN")
            then "Irradiance UVN Bands"
            else
            if ($VAR_product_type = "L1B_IR_SIR")
            then "Irradiance SWIR Bands"
            else
            if ($VAR_product_type = "L1B_RA_BD1")
            then "Radiance Band 1"
            else
            if ($VAR_product_type = "L1B_RA_BD2")
            then "Radiance Band 2"
            else
            if ($VAR_product_type = "L1B_RA_BD3")
            then "Radiance Band 3"
            else
            if ($VAR_product_type = "L1B_RA_BD4")
            then "Radiance Band 4"
            else
            if ($VAR_product_type = "L1B_RA_BD5")
            then "Radiance Band 5"
            else
            if ($VAR_product_type = "L1B_RA_BD6")
            then "Radiance Band 6"
            else
            if ($VAR_product_type = "L1B_RA_BD7")
            then "Radiance Band 7"
            else
            if ($VAR_product_type = "L1B_RA_BD8")
            then "Radiance Band 8"
            else "UNKNOWN"
         }
         </metadata>,

         <!-- PROCESSING LEVEL -->
         <metadata queryable="processinglevel" name="Processing level"
                   category="product" type="text/plain">
         {
            let $VAR_level := fn:substring($name, 10, 3)
            return
               if ($VAR_level = "L2_")
               then "L2"
               else
                  if ($VAR_level = "L1B")
                  then "L1B"
                  else "UNKNOWN"
         }
         </metadata>,

         <!-- PROCESSING MODE -->
         <metadata queryable="processingmode" name="Processing mode"
                   category="product" type="text/plain">
         {
            let $VAR_mode := fn:substring($name, 5, 4)
            return
               if ($VAR_mode = "NRTI")
               then "Near real time"
               else
                  if ($VAR_mode = "OFFL")
                  then "Offline"
                  else
                     if ($VAR_mode = "RPRO")
                     then "Reprocessing"
                     else
                        if ($VAR_mode = "TEST")
                        then "Internal Test"
                        else
                           if ($VAR_mode = "OGCA")
                           then "On-Ground Calibration"
                           else
                              if ($VAR_mode = "GSOV")
                              then "Ground Segment Overall Validation, System Level Testing"
                              else
                                 if ($VAR_mode = "OPER")
                                 then "Operational Processing"
                                 else "UNKNOWN"
         }
         </metadata>,

         <!-- PROCESSING MODE ABBREVIATION -->
         <metadata queryable="processingmodeabbreviation" name="Processing mode abbreviation"
                   category="product" type="text/plain">
         { fn:substring($name, 5, 4) }
         </metadata>,

         <!-- PROCESSOR VERSION -->
         <metadata queryable="processorversion" name="Processor version"
                   category="product" type="text/plain">
         { fn:substring($name, 62, 6) }
         </metadata>,

         <!-- REVISION NUMBER -->
         <metadata queryable="revisionnumber" name="Revision number"
                   category="product" type="text/plain">
         { fn:substring($name, 59, 2) }
         </metadata>,

         <!-- ABSOLUTE ORBIT -->
         <!-- Could be:
         { data($root/attributes/*[name(.) = "orbit"]) }
         But extracted from product name (some products seem to miss the above
         field, and extraction is faster).  -->
         <metadata queryable="orbitnumber" name="Orbit number (start)"
                   category="product" type="text/integer">
         { xs:int(fn:substring($name, 53, 5)) }
         </metadata>

         <!-- RELATIVE ORBIT -->
         <!-- No value in product -->

         <!-- ORBIT DIRECTION -->
         <!-- No value in product -->
         )

         let $GMLFootprint :=
            if (empty($VAR_posListTMP))
            then ""
            else
         (
         <!-- GML FOOTPRINT -->
         <metadata queryable="gmlfootprint" name="Footprint"
                   category="product" type="application/gml+xml">
            <gml:Polygon xmlns:gml="http://www.opengis.net/gml"
                         srsName="http://www.opengis.net/gml/srs/epsg.xml#4326">
               <gml:outerBoundaryIs>
                  <gml:LinearRing>
                     <gml:coordinates>
                     {
                        (: posList looks like "lat lon lat lon lat ...."
                                         e.g. "10 -30 12 -34 15 ...."
                           GML has to look like "lat,lon lat,lon lat ...."
                                         e.g. "10,-30 12,-34 15 ...." :)
                        let $VAR_posList :=
                           fn:data($root/groups/METADATA/groups/EOP_METADATA/groups/
                                   om:featureOfInterest/groups/eop:multiExtentOf/groups/
                                   gml:surfaceMembers/groups/gml:exterior/attributes/
                                   *[name(.) = "gml:posList"])
                        let $VAR_tokens := fn:tokenize($VAR_posList, ' ')
                        return
                           fn:string-join(
                           (   
                              for $i at $index in $VAR_tokens
                              return
                                 concat($i,
                                        (if (matches(xs:string($index), ".*1") or
                                             matches(xs:string($index), ".*3") or
                                             matches(xs:string($index), ".*5") or
                                             matches(xs:string($index), ".*7") or
                                             matches(xs:string($index), ".*9"))
                                         then "," 
                                         else " "))
                           ), ""
                           )
                     }
                     </gml:coordinates>
                  </gml:LinearRing>
               </gml:outerBoundaryIs>
            </gml:Polygon>
         </metadata>
         )

         let $JTSFootprint :=
            if (empty($VAR_posListTMP))
            then ""
            else
         (
         <!-- JTS FOOTPRINT -->
         <metadata
            queryable="footprint"
            category="product"
            name="JTS footprint"
            type="application/jts">
            {
               (: posList looks like "lat lon lat lon lat ...."
                                e.g. "10 -30 12 -34 15 ...."
                  JTS has to look like "lon lat, lon lat, lon ...."
                                e.g. "-30 10,-34 12, ...." :)

               let $VAR_posList :=
                  fn:data($root/groups/METADATA/groups/EOP_METADATA/groups/
                          om:featureOfInterest/groups/eop:multiExtentOf/groups/
                          gml:surfaceMembers/groups/gml:exterior/attributes/
                          *[name(.) = "gml:posList"])

               let $VAR_tokens := fn:tokenize($VAR_posList, ' ')

               (: Extraction of latitudes :)
               let $VAR_tokensLat :=
                  for $i at $index in $VAR_tokens
                  return
                     (if (matches(xs:string($index), ".*1") or
                          matches(xs:string($index), ".*3") or
                          matches(xs:string($index), ".*5") or
                          matches(xs:string($index), ".*7") or
                          matches(xs:string($index), ".*9"))
                       then $i
                       else ()) 

               (: Extraction of longitudes :)
               let $VAR_tokensLon :=
                  for $i at $index in $VAR_tokens
                  return
                     (if (matches(xs:string($index), ".*0") or
                          matches(xs:string($index), ".*2") or
                          matches(xs:string($index), ".*4") or
                          matches(xs:string($index), ".*6") or
                          matches(xs:string($index), ".*8"))
                       then $i
                       else ()) 

               (: Mixing longitudes and latitudes :)
               let $VAR_fpTokens :=
                  for $i at $index in $VAR_tokens (: $VAR_tokens count equals $VAR_tokensLon
                                                 count + $VAR_tokensLat count :)
                  return
                     ($VAR_tokensLon[$index],
                      $VAR_tokensLat[$index])

               (: Putting " " and "," between coordinates :)
               let $VAR_fpJTS :=
                  fn:string-join(
                  (   
                     for $i at $index in $VAR_fpTokens
                                                      
                     return
                        concat($i,
                               (if (matches(xs:string($index), ".*1") or
                                    matches(xs:string($index), ".*3") or
                                    matches(xs:string($index), ".*5") or
                                    matches(xs:string($index), ".*7") or
                                    matches(xs:string($index), ".*9"))
                                then " " 
                                else ","))
                  ), ""
                  )   

               (: Removing the final "," :)
               let $Var_fpJTS2 :=
                  if (matches($VAR_fpJTS, ".*,"))
                  then substring($VAR_fpJTS, 1, (fn:string-length($VAR_fpJTS) - 1)) 
                  else $VAR_fpJTS

               (: And finaly "POLYGON ((.....))" :)
               let $footprint := concat("POLYGON ((", $Var_fpJTS2, "))")

               return $footprint
            }
         </metadata>
         )

         return
            if (empty($VAR_posListTMP))
            then $res
            else ($res, $GMLFootprint, $JTSFootprint)
      ]]>
      </dhus:metadataExtractor>

   </rdf:Description>

   <!-- S5P NISE AUXILIARY PRODUCT  -->
   <rdf:Description rdf:about="&s5p;auxiliaryNise">
      <dhus:metadataTypes rdf:parseType="Literal">

         <!-- MM This is added for provisoire
         This should be renamed FOR ALL ADDONS -->
         <metadataType id="satellite"
                       name="Satellite"
                       contentType="text/plain"
                       category="summary">
         </metadataType>

         <!-- MM This is added for provisoire
         This should be renamed FOR ALL ADDONS -->
         <metadataType id="instrument"
                       name="Instrument"
                       contentType="text/plain"
                       category="summary">
         </metadataType>

         <metadataType id="generationDate"
                       name="Generation date"
                       contentType="text/date+iso8601"
                       category="product">
            <solrField name="generationdate"
                       type="tdate"/>
         </metadataType>

         <metadataType id="format"
                       name="Format"
                       contentType="text/plain"
                       category="product">
            <solrField name="format"
                       type="string"
                       required="true"/>
         </metadataType>

         <metadataType id="size"
                       name="Size"
                       contentType="text/plain"
                       category="summary">
            <solrField name="size"
                       type="string"/>
         </metadataType>

         <metadataType id="beginPosition"
                       name="Validity start"
                       contentType="text/date+iso8601"
                       category="product">
            <solrField name="beginposition"
                       type="tdate"/>
         </metadataType>

         <metadataType id="endPosition"
                       name="Validity stop"
                       contentType="text/date+iso8601"
                       category="product">
            <solrField name="endposition"
                       type="tdate"/>
         </metadataType>

         <metadataType id="filename"
                       name="Filename"
                       contentType="text/plain"
                       category="summary">
            <solrField name="filename"
                       type="string"
                       required="true"/>
         </metadataType>

         <metadataType id="productType"
                       name="Product type"
                       contentType="text/plain"
                       category="product">
            <solrField name="producttype"
                       type="text_general"/>
         </metadataType>

         <metadataType id="platformName"
                       name="Platform name"
                       contentType="text/plain"
                       category="platform">
            <solrField name="platformname"
                       type="text_general"/>
         </metadataType>

         <metadataType id="platformShortName"
                       name="Platform short name"
                       contentType="text/plain"
                       category="platform">
            <solrField name="platformshortname"
                       type="text_general"/>
         </metadataType>

         <metadataType id="platformSerialIdentifier"
                       name="Platform serial identifier"
                       contentType="text/plain"
                       category="platform">
            <solrField name="platformserialidentifier"
                       type="text_general"/>
         </metadataType>

         <metadataType id="instrumentName"
                       name="Instrument name"
                       contentType="text/plain"
                       category="instrument">
            <solrField name="instrumentname"
                       type="text_general"/>
         </metadataType>

         <metadataType id="instrumentShortName"
                       name="Instrument short name"
                       contentType="text/plain"
                       category="instrument">
            <solrField name="instrumentshortname"
                       type="text_general"/>
         </metadataType>

      </dhus:metadataTypes>
   </rdf:Description>

   <!-- S5P NISE AUXILIARY PRODUCT -->
   <rdf:Description rdf:about="&s5p;auxiliaryNise">
      <dhus:support/>
      <dhus:identifier rdf:parseType="Literal">
      <![CDATA[
         fn:tokenize(name (.), '\.')[1]
      ]]>
      </dhus:identifier>

      <dhus:metadataExtractor  rdf:parseType="Literal">
      <![CDATA[
         <!-- ============================================================== -->
         <!-- FUNCTIONS                                                      -->
         <!-- ============================================================== -->

         declare function local:computeSizes ($path, $base as item()*) as item()*
         {
            let $product := .
            return
               fn:data($product/@size)
         };

         declare function local:roundHalfDown($arg, $precision) as xs:double*
         {
            xs:integer((xs:double($arg)*math:power(10, $precision))) div
               math:power(10, $precision)
         };

         declare function local:computedateTime ($inputDate as xs:string?) as xs:string
         {
            let $input := $inputDate
            return concat(substring($input, 1, 4), "-",
                          substring($input, 5, 2), "-",
                          substring($input, 7, 5), ":",
                          substring($input, 12, 2), ":",
                          substring($input, 14, 2), ".000Z")
         };

         <!-- ============================================================== -->
         <!-- VARIABLES                                                      -->
         <!-- ============================================================== -->

         let $name := name()

         let $VAR_time := fn:concat(
            fn:substring($name, 15, 4), "-",
            fn:substring($name, 19, 2), "-",
            fn:substring($name, 21, 2), "T00:00:00.000Z")

         return
         (

         <!-- ============================================================== -->
         <!-- EXTRACTIONS                                                    -->
         <!-- ============================================================== -->

         <!-- Indexed metadata -->

         <!-- MM This is added for provisoire
         This should be renamed FOR ALL ADDONS -->
         <!-- SATELLITE -->
         <metadata name="Satellite"
                   category="summary" type="text/plain">
            Sentinel-5 P
         </metadata>,

         <!-- MM This is added for provisoire
         This should be renamed FOR ALL ADDONS -->
         <!-- INSTRUMENT -->
         <metadata name="Instrument"
                   category="summary" type="text/plain">
            SSMIS
         </metadata>,

         <!-- GENERATION DATE -->
         <metadata queryable="generationdate" name="Generation date"
                   category="product" type="text/date+iso8601">
         {
            $VAR_time
         }
         </metadata>,

         <!-- FORMAT -->
         <metadata queryable="format" name="Format"
                   category="product" type="text/plain">
            HDF-EOS
         </metadata>,

         <!-- SIZE -->
         <metadata queryable="size" name="Size"
                   category="summary" type="text/plain">
         {
            let $size := xs:double(fn:sum(local:computeSizes(., ())))
            let $kilo := 1024
            let $mega := xs:integer($kilo * 1024)
            let $giga := xs:integer($mega * 1024)
            let $tera := xs:integer($giga * 1024)
            let $kilo_size := local:roundHalfDown(($size div $kilo), 2)
            let $mega_size := local:roundHalfDown(($size div $mega), 2)
            let $giga_size := local:roundHalfDown(($size div $giga), 2)
            let $tera_size := local:roundHalfDown(($size div $tera), 2)
            return
               if ($size < 1024)
               then
                  concat ($size, " bytes")
               else
                  if (($size div $kilo) < 1024)
                  then
                     concat ($kilo_size, " KB")
                  else
                     if (($size div $mega) < 1024)
                        then
                           concat ($mega_size, " MB")
                     else
                        if (($size div $giga) < 1024)
                        then
                           concat ($giga_size, " GB")
                        else
                           concat ($tera_size, " TB")
         }
         </metadata>,

         <!-- SENSING START -->
         <metadata queryable="beginposition" name="Validity start"
                   category="product" type="text/date+iso8601">
         {
            $VAR_time
         }
         </metadata>,

         <!-- SENSING STOP -->
         <metadata queryable="endposition" name="Validity stop"
                   category="product" type="text/date+iso8601">
         {
            $VAR_time
         }
         </metadata>,

         <!-- FILENAME -->
         <metadata queryable="filename" name="Filename"
                   category="summary" type="text/plain">
         { $name }
         </metadata>,

         <!-- PRODUCT TYPE -->
         <metadata queryable="producttype" name="Product type"
                   category="product" type="text/plain">
            AUX_NISE__
         </metadata>,

         <!-- PLATFORM NAME -->
         <metadata queryable="platformname" name="Platform name"
                   category="platform" type="text/plain">
            Sentinel-5 Precursor
         </metadata>,

         <!-- PLATFORM SHORT NAME -->
         <metadata queryable="platformshortname" name="Platform short name"
                   category="platform" type="text/plain">
            S5P
         </metadata>,

         <!-- PLATFORM SERIAL IDENTIFIER -->
         <metadata queryable="platformserialidentifier" name="Platform serial identifier"
                   category="platform" type="text/plain">
            5P
         </metadata>,

         <!-- INSTRUMENT NAME -->
         <metadata queryable="instrumentname" name="Instrument name"
                   category="instrument" type="text/plain">
            Special Sensor Microwave Imager/Sounder
         </metadata>,

         <!-- INSTRUMENT SHORT NAME -->
         <metadata queryable="instrumentshortname" name="Instrument short name"
                   category="instrument" type="text/plain">
            SSMIS
         </metadata>

      )
      ]]>
      </dhus:metadataExtractor>

   </rdf:Description>

</rdf:RDF>
